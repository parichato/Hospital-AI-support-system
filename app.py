# ----------------------------------------------------------
# üè• Hospital AI Decision Support System (Business Edition)
# ----------------------------------------------------------
import os
import json
import joblib
import numpy as np
import pandas as pd
import streamlit as st
from catboost import CatBoostClassifier

# ----------------------------------------------------------
# ‚öôÔ∏è Page Setup
# ----------------------------------------------------------
st.set_page_config(page_title="AI Hospital Dashboard", page_icon="üè•", layout="wide")
st.title("üè• Hospital AI for Business ‚Äî Data-Driven Clinical Decision Support")
st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")

# ----------------------------------------------------------
# üì¶ Load Models
# ----------------------------------------------------------
@st.cache_resource
def load_all():
    try:
        model = joblib.load("predict_catboost_multi.pkl")
        st.success("‚úÖ Loaded: Clinical Severity Model (CatBoost)")
    except:
        model = None
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• CatBoost")

    try:
        encoders = joblib.load("encoders_multi.pkl")
        st.success("‚úÖ Loaded: Encoders for Clinical Data")
    except:
        encoders = None
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö encoders_multi.pkl")

    try:
        with open("features_multi.json", "r") as f:
            features = json.load(f)
        st.success("‚úÖ Loaded: Model Features Configuration")
    except:
        features = []
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö features_multi.json")

    return model, encoders, features

model, encoders, features = load_all()

# ----------------------------------------------------------
# üß© Manual Mappings (Medical Context)
# ----------------------------------------------------------
activity_mapping = {
    "0": "‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡πâ‡∏≤",
    "1": "‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
    "2": "‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
    "3": "‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
    "4": "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "5": "‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤",
    "6": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
}

aplace_mapping = {
    "10": "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢",
    "11": "‡∏ñ‡∏ô‡∏ô/‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á",
    "12": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "13": "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "14": "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
    "15": "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
}

prov_mapping = {
    "10": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "20": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    "30": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
    "40": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
    "50": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
    "60": "‡∏™‡∏á‡∏Ç‡∏•‡∏≤",
    "99": "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
}

severity_map = {0: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢", 1: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", 2: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å"}
advice_map = {
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢": "‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 15‚Äì30 ‡∏ô‡∏≤‡∏ó‡∏µ",
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "‡∏™‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥ / ‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î / ‡πÄ‡∏ù‡πâ‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î",
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å": "‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏™‡∏´‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πà‡∏ß‡∏ô"
}

# ==========================================================
# ü©∫ TAB SYSTEM ‚Äî MEDICAL & BUSINESS INTEGRATION
# ==========================================================
tab1, tab2, tab3, tab4 = st.tabs([
    "üß† Clinical Risk Prediction (CatBoost)",
    "üë• Cluster Insight (K-Means)",
    "üß© Risk Association (Apriori)",
    "üìä Clinical Summary Dashboard"
])

# ----------------------------------------------------------
# üß† TAB 1 ‚Äî CatBoost Prediction (KEEP ORIGINAL CODE)
# ----------------------------------------------------------
with tab1:
    st.subheader("üß† Clinical Severity Prediction (CatBoost)")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå (AI Triage System)")

    # ‚úÖ ORIGINAL CATBOOST CODE (UNCHANGED)
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö")
    with st.form("input_form"):
        age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", min_value=0, max_value=120, value=35)
        sex = st.radio("‡πÄ‡∏û‡∏®", ["‡∏´‡∏ç‡∏¥‡∏á", "‡∏ä‡∏≤‡∏¢"], horizontal=True)
        is_night = st.checkbox("‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", value=False)
        head_injury = st.checkbox("‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞", value=False)
        mass_casualty = st.checkbox("‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å", value=False)

        st.markdown("**‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Risk Factors)**")
        c1, c2, c3, c4, c5 = st.columns(5)
        with c1: risk1 = st.checkbox("‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢ / ‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢")
        with c2: risk2 = st.checkbox("‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß / ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ó")
        with c3: risk3 = st.checkbox("‡πÄ‡∏°‡∏≤ / ‡∏î‡∏∑‡πà‡∏°‡∏™‡∏∏‡∏£‡∏≤")
        with c4: risk4 = st.checkbox("‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏•‡πá‡∏Å")
        with c5: risk5 = st.checkbox("‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")

        st.markdown("**‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î/‡∏¢‡∏≤‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢**")
        d1, d2, d3 = st.columns(3)
        with d1: cannabis = st.checkbox("‡∏Å‡∏±‡∏ç‡∏ä‡∏≤")
        with d2: amphetamine = st.checkbox("‡∏¢‡∏≤‡∏ö‡πâ‡∏≤ / ‡πÅ‡∏≠‡∏°‡πÄ‡∏ü‡∏ï‡∏≤‡∏°‡∏µ‡∏ô")
        with d3: drugs = st.checkbox("‡∏¢‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ")

        st.markdown("**‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå**")
        activity = st.selectbox("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(activity_mapping.values()))
        aplace = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(aplace_mapping.values()))
        prov = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(prov_mapping.values()))
        submit = st.form_submit_button("üîé ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")

    def preprocess_input(data_dict):
        df = pd.DataFrame([data_dict])
        reverse_activity = {v: k for k, v in activity_mapping.items()}
        reverse_aplace = {v: k for k, v in aplace_mapping.items()}
        reverse_prov = {v: k for k, v in prov_mapping.items()}
        if df.at[0, "activity"] in reverse_activity:
            df.at[0, "activity"] = reverse_activity[df.at[0, "activity"]]
        if df.at[0, "aplace"] in reverse_aplace:
            df.at[0, "aplace"] = reverse_aplace[df.at[0, "aplace"]]
        if df.at[0, "prov"] in reverse_prov:
            df.at[0, "prov"] = reverse_prov[df.at[0, "prov"]]
        for col in [
            "age", "sex", "is_night", "head_injury", "mass_casualty",
            "risk1", "risk2", "risk3", "risk4", "risk5",
            "cannabis", "amphetamine", "drugs"
        ]:
            df[col] = df[col].astype(float)
        for col in ["activity", "aplace", "prov"]:
            val = str(df.at[0, col])
            if encoders and col in encoders:
                le = encoders[col]
                if val in le.classes_:
                    df[col] = le.transform([val])[0]
                else:
                    df[col] = 0
            else:
                df[col] = 0
        if "age_group_60plus" not in df.columns:
            df["age_group_60plus"] = (df["age"] >= 60).astype(int)
        if "risk_count" not in df.columns:
            df["risk_count"] = df[["risk1","risk2","risk3","risk4","risk5"]].sum(axis=1)
        if "night_flag" not in df.columns:
            df["night_flag"] = df["is_night"].astype(int)
        df = df.reindex(columns=features, fill_value=0)
        return df

    if submit:
        input_data = {
            "age": age,
            "sex": 1 if sex == "‡∏ä‡∏≤‡∏¢" else 0,
            "is_night": int(is_night),
            "head_injury": int(head_injury),
            "mass_casualty": int(mass_casualty),
            "risk1": int(risk1),
            "risk2": int(risk2),
            "risk3": int(risk3),
            "risk4": int(risk4),
            "risk5": int(risk5),
            "cannabis": int(cannabis),
            "amphetamine": int(amphetamine),
            "drugs": int(drugs),
            "activity": activity,
            "aplace": aplace,
            "prov": prov
        }

        X_input = preprocess_input(input_data)
        if model is not None:
            probs = model.predict_proba(X_input)[0]
            pred_class = int(np.argmax(probs))
            label = severity_map.get(pred_class, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")

            st.markdown(f"### ü©∫ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: **{label}**")
            st.info(f"üí° ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: {advice_map[label]}")
            st.caption(f"üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö: {probs[pred_class]*100:.1f}%")

# ----------------------------------------------------------
# üë• TAB 2 ‚Äî K-Means Clustering
# ----------------------------------------------------------
with tab2:
    st.subheader("üë• Patient Segmentation & Resource Planning (K-Means)")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")

    try:
        kmeans = joblib.load("kmeans_cluster_model.pkl")
        scaler = joblib.load("scaler_cluster.pkl")
        st.success("‚úÖ Loaded: K-Means Cluster Model & Scaler")
    except:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• K-Means ‡∏´‡∏£‡∏∑‡∏≠ Scaler")
        kmeans, scaler = None, None

    if model and kmeans and scaler and submit:
        # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô feature mismatch
        if hasattr(scaler, "feature_names_in_"):
            valid_cols = scaler.feature_names_in_
            X_cluster = X_input[[c for c in valid_cols if c in X_input.columns]]
        else:
            X_cluster = X_input.select_dtypes(include=[np.number])

        X_scaled = scaler.transform(X_cluster)
        cluster_label = int(kmeans.predict(X_scaled)[0])

        desc = {
            0: "‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ / ‡∏•‡∏∑‡πà‡∏ô‡∏•‡πâ‡∏°‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô ‚Üí Low Risk",
            1: "‡∏ß‡∏±‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô / ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô / ‡πÄ‡∏°‡∏≤ ‚Üí High Risk",
            2: "‡πÄ‡∏î‡πá‡∏Å / ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡∏Å‡∏µ‡∏¨‡∏≤ ‚Üí Moderate Risk",
            3: "‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô / ‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Üí High Risk",
            4: "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏î‡πà‡∏ô ‚Üí Low Risk"
        }
        st.markdown(f"### üë§ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° **Cluster {cluster_label}**")
        st.info(f"üìò ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°: {desc.get(cluster_label, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ')}")

# ----------------------------------------------------------
# üß© TAB 3 ‚Äî Apriori Rules
# ----------------------------------------------------------
with tab3:
    st.subheader("üß© Clinical Risk Association Mining (Apriori Rules)")
    st.caption("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô")

    try:
        rules_minor = joblib.load("apriori_rules_minor.pkl")
        rules_severe = joblib.load("apriori_rules_severe.pkl")
        rules_fatal = joblib.load("apriori_rules_fatal.pkl")
        st.success("‚úÖ Loaded: Apriori Risk Patterns")
    except:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏é Apriori")

    if model and submit:
        if label == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢" and rules_minor is not None:
            df_rules = rules_minor.head(5)
        elif label == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" and rules_severe is not None:
            df_rules = rules_severe.head(5)
        elif label == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å" and rules_fatal is not None:
            df_rules = rules_fatal.head(5)
        else:
            df_rules = pd.DataFrame()

        if not df_rules.empty:
            st.dataframe(df_rules[["antecedents", "consequents", "support", "confidence", "lift"]])
        else:
            st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ")

# ----------------------------------------------------------
# üìä TAB 4 ‚Äî Summary Dashboard
# ----------------------------------------------------------
with tab4:
    st.subheader("üìä Hospital Summary Dashboard")
    st.caption("‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI")

    if submit and model is not None:
        result = {
            "timestamp": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
            "age": age,
            "sex": sex,
            "predicted_severity": label,
            "cluster_label": cluster_label if "cluster_label" in locals() else None
        }
        df_result = pd.DataFrame([result])
        if os.path.exists("results_log.csv"):
            df_result.to_csv("results_log.csv", mode="a", header=False, index=False)
        else:
            df_result.to_csv("results_log.csv", index=False)
        st.success("üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    if os.path.exists("results_log.csv"):
        df_log = pd.read_csv("results_log.csv")
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(df_log):,}")
        st.bar_chart(df_log["predicted_severity"].value_counts())

        st.markdown("---")
        if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
            os.remove("results_log.csv")
            st.success("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
